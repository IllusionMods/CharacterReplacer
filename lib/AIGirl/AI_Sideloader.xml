<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AI_Sideloader</name>
    </assembly>
    <members>
        <member name="T:Sideloader.Sideloader">
            <summary>
            Allows for loading mods in .zip format from the mods folder and automatically resolves ID conflicts.
            </summary>
        </member>
        <member name="F:Sideloader.Sideloader.GUID">
            <summary> Plugin GUID </summary>
        </member>
        <member name="F:Sideloader.Sideloader.PluginName">
            <summary> Plugin name </summary>
        </member>
        <member name="F:Sideloader.Sideloader.Version">
            <summary> Plugin version </summary>
        </member>
        <member name="P:Sideloader.Sideloader.ModsDirectory">
            <summary> Directory from which to load mods </summary>
        </member>
        <member name="F:Sideloader.Sideloader.LoadedManifests">
            <summary> List of all loadeded manifest files </summary>
        </member>
        <member name="M:Sideloader.Sideloader.BuildPngFolderList(ICSharpCode.SharpZipLib.Zip.ZipFile)">
            <summary>
            Construct a list of all folders that contain a .png
            </summary>
        </member>
        <member name="M:Sideloader.Sideloader.BuildPngOnlyFolderList">
            <summary>
            Build a list of folders that contain .pngs but do not match an existing asset bundle
            </summary>
        </member>
        <member name="M:Sideloader.Sideloader.IsPngFolderOnly(System.String)">
            <summary>
            Check whether the asset bundle matches a folder that contains .png files and does not match an existing asset bundle
            </summary>
        </member>
        <member name="M:Sideloader.Sideloader.IsModLoaded(System.String)">
            <summary>
            Check if a mod with specified GUID has been loaded.
            </summary>
        </member>
        <member name="M:Sideloader.Sideloader.GetManifest(System.String)">
            <summary>
            Check if a mod with specified GUID has been loaded and fetch its manifest.
            Returns null if there was no mod with this guid loaded.
            </summary>
            <param name="guid">GUID of the mod.</param>
            <returns>Manifest of the loaded mod or null if mod is not loaded.</returns>
        </member>
        <member name="M:Sideloader.Sideloader.GetPngNames">
            <summary>
            Get a list of file paths to all png files inside the loaded mods
            </summary>
        </member>
        <member name="M:Sideloader.Sideloader.GetPng(System.String,UnityEngine.TextureFormat,System.Boolean)">
            <summary>
            Get a new copy of the png file if it exists in any of the loaded zipmods
            </summary>
        </member>
        <member name="M:Sideloader.Sideloader.IsPng(System.String)">
            <summary>
            Check whether the .png file comes from a sideloader mod
            </summary>
        </member>
        <member name="T:Sideloader.AutoResolver.UniversalAutoResolver">
            <summary>
            Automatically resolves ID conflicts by saving GUID to the card and changing item IDs at runtime
            </summary>
        </member>
        <member name="F:Sideloader.AutoResolver.UniversalAutoResolver.UARExtID">
            <summary>
            Extended save ID
            </summary>
        </member>
        <member name="F:Sideloader.AutoResolver.UniversalAutoResolver.UARExtIDOld">
            <summary>
            Extended save ID used in EmotionCreators once upon a time, no longer used but must still be checked for cards that still use it
            </summary>
        </member>
        <member name="F:Sideloader.AutoResolver.UniversalAutoResolver.BaseSlotID">
            <summary>
            The starting point for UAR IDs
            </summary>
        </member>
        <member name="P:Sideloader.AutoResolver.UniversalAutoResolver.LoadedResolutionInfo">
            <summary>
            All loaded ResolveInfo
            </summary>
        </member>
        <member name="M:Sideloader.AutoResolver.UniversalAutoResolver.TryGetResolutionInfo(System.String,System.Int32)">
            <summary>
            Get the ResolveInfo for an item
            </summary>
            <param name="property">Property as defined in StructReference</param>
            <param name="localSlot">Current (resolved) ID of the item</param>
            <returns>ResolveInfo</returns>
        </member>
        <member name="M:Sideloader.AutoResolver.UniversalAutoResolver.TryGetResolutionInfo(System.Int32,System.String,AIChara.ChaListDefine.CategoryNo)">
            <summary>
            Get the ResolveInfo for an item. Used for compatibility resolving in cases where GUID is not known (hard mods).
            </summary>
            <param name="slot">Original ID as defined in the list file</param>
            <param name="property">Property as defined in StructReference</param>
            <param name="categoryNo">Category number of the item</param>
            <returns>ResolveInfo</returns>
        </member>
        <member name="M:Sideloader.AutoResolver.UniversalAutoResolver.TryGetResolutionInfo(System.Int32,System.String,System.String)">
            <summary>
            Get the ResolveInfo for an item
            </summary>
            <param name="slot">Original ID as defined in the list file</param>
            <param name="property"></param>
            <param name="guid"></param>
            <returns>ResolveInfo</returns>
        </member>
        <member name="M:Sideloader.AutoResolver.UniversalAutoResolver.TryGetResolutionInfo(System.Int32,System.String,AIChara.ChaListDefine.CategoryNo,System.String)">
            <summary>
            Get the ResolveInfo for an item
            </summary>
            <param name="slot">Original ID as defined in the list file</param>
            <param name="property"></param>
            <param name="categoryNo"></param>
            <param name="guid"></param>
            <returns>ResolveInfo</returns>
        </member>
        <member name="M:Sideloader.AutoResolver.UniversalAutoResolver.ResolveStructure(System.Collections.Generic.Dictionary{Sideloader.AutoResolver.CategoryProperty,Sideloader.AutoResolver.StructValue{System.Int32}},System.Object,System.Collections.Generic.ICollection{Sideloader.AutoResolver.ResolveInfo},System.String)">
            <summary>
            Change the ID of items saved to a card to their resolved IDs
            </summary>
        </member>
        <member name="F:Sideloader.AutoResolver.UniversalAutoResolver.Hooks.DoingImport">
            <summary>
            A flag for disabling certain events when importing KK cards to EC. Should always be set to false in InstallHooks for KK and always remain false.
            </summary>
        </member>
        <member name="T:Sideloader.AutoResolver.ResolveInfo">
            <summary>
            Contains information saved to the card for resolving ID conflicts
            </summary>
        </member>
        <member name="P:Sideloader.AutoResolver.ResolveInfo.GUID">
            <summary>
            GUID of the mod as defined in the manifest.xml
            </summary>
        </member>
        <member name="P:Sideloader.AutoResolver.ResolveInfo.Slot">
            <summary>
            ID of the item as defined in the mod's list files
            </summary>
        </member>
        <member name="P:Sideloader.AutoResolver.ResolveInfo.LocalSlot">
            <summary>
            Resolved item ID. IDs greater than 100000000 are resolved IDs belonging to Sideloader. Use the resolved ID (local slot) to look up the original ID (slot)
            </summary>
        </member>
        <member name="P:Sideloader.AutoResolver.ResolveInfo.Property">
            <summary>
            Property of the object as defined in Sideloader's StructReference.
            If ever you need to know what to use for this, enable debug resolve info logging and see what Sideloader generates at the start of the game.
            </summary>
        </member>
        <member name="P:Sideloader.AutoResolver.ResolveInfo.CategoryNo">
            <summary>
            ChaListDefine.CategoryNo. Typically only used for hard mod resolving in cases where the GUID is not known.
            </summary>
        </member>
        <member name="T:Sideloader.Manifest">
            <summary>
            Contains data about the loaded manifest.xml
            </summary>
        </member>
        <member name="F:Sideloader.Manifest.manifestDocument">
            <summary>
            Full contents of the manifest.xml.
            </summary>
        </member>
        <member name="P:Sideloader.Manifest.GUID">
            <summary>
            GUID of the mod.
            </summary>
        </member>
        <member name="P:Sideloader.Manifest.Name">
            <summary>
            Name of the mod. Only used for display the name of the mod when mods are loaded.
            </summary>
        </member>
        <member name="P:Sideloader.Manifest.Version">
            <summary>
            Version of the mod.
            </summary>
        </member>
        <member name="P:Sideloader.Manifest.Author">
            <summary>
            Author of the mod. Not currently used for anything.
            </summary>
        </member>
        <member name="P:Sideloader.Manifest.Website">
            <summary>
            Website of the mod. Not currently used for anything.
            </summary>
        </member>
        <member name="P:Sideloader.Manifest.Description">
            <summary>
            Description of the mod. Not currently used for anything.
            </summary>
        </member>
        <member name="P:Sideloader.Manifest.Game">
            <summary>
            Game the mod is made for. If specified, the mod will only load for that game. If not specified will load on any game.
            </summary>
        </member>
        <member name="M:Extensions.Replace(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Returns a new string in which all occurrences of a specified string in the current instance are replaced with another 
            specified string according the type of search to use for the specified string.
            </summary>
            <param name="str">The string performing the replace method.</param>
            <param name="oldValue">The string to be replaced.</param>
            <param name="newValue">The string replace all occurrences of <paramref name="oldValue"/>. 
            If value is equal to <c>null</c>, than all occurrences of <paramref name="oldValue"/> will be removed from the <paramref name="str"/>.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <returns>A string that is equivalent to the current string except that all instances of <paramref name="oldValue"/> are replaced with <paramref name="newValue"/>. 
            If <paramref name="oldValue"/> is not found in the current instance, the method returns the current instance unchanged.</returns>
        </member>
        <member name="F:BepisPlugins.Metadata.PluginsVersion">
            <summary>
            Version number used be all plugins. Must be convertible to <see cref="T:System.Version"/>
            Use ReleaseVersion.HotfixVersion format
            </summary>
        </member>
    </members>
</doc>
